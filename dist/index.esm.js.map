{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Object with lat and lng properties. */\nexport interface LatLng {\n  lat: number;\n  lng: number;\n}\n\n/**\n * Array with lat and lng elements.\n */\nexport type LatLngTuple = number[];\n\n/**\n * Decodes an encoded path string into a sequence of LatLngs.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n *\n *  #### Example\n *\n * ```js\n * import { decode } from \"@googlemaps/polyline-codec\";\n *\n * const encoded = \"_p~iF~ps|U_ulLnnqC_mqNvxq`@\";\n * console.log(decode(encoded, 5));\n * // [\n * //   [38.5, -120.2],\n * //   [40.7, -120.95],\n * //   [43.252, -126.453],\n * // ]\n * ```\n */\nexport const decode = function (\n  encodedPath: string,\n  precision = 5\n): LatLngTuple[] {\n  const factor = Math.pow(10, precision);\n\n  const len = encodedPath.length;\n\n  // For speed we preallocate to an upper bound on the final length, then\n  // truncate the array before returning.\n  const path = new Array(Math.floor(encodedPath.length / 2));\n  let index = 0;\n  let lat = 0;\n  let lng = 0;\n  let pointIndex = 0;\n\n  // This code has been profiled and optimized, so don't modify it without\n  // measuring its performance.\n  for (; index < len; ++pointIndex) {\n    // Fully unrolling the following loops speeds things up about 5%.\n    let result = 1;\n    let shift = 0;\n    let b: number;\n    do {\n      // Invariant: \"result\" is current partial result plus (1 << shift).\n      // The following line effectively clears this bit by decrementing \"b\".\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f); // See note above.\n    lat += result & 1 ? ~(result >> 1) : result >> 1;\n\n    result = 1;\n    shift = 0;\n    do {\n      b = encodedPath.charCodeAt(index++) - 63 - 1;\n      result += b << shift;\n      shift += 5;\n    } while (b >= 0x1f);\n    lng += result & 1 ? ~(result >> 1) : result >> 1;\n\n    path[pointIndex] = [lat / factor, lng / factor];\n  }\n  // truncate array\n  path.length = pointIndex;\n\n  return path;\n};\n\n/**\n * Polyline encodes an array of objects having lat and lng properties.\n *\n * See {@link https://developers.google.com/maps/documentation/utilities/polylinealgorithm}\n *\n * #### Example\n *\n * ```js\n * import { encode } from \"@googlemaps/polyline-codec\";\n *\n * const path = [\n *   [38.5, -120.2],\n *   [40.7, -120.95],\n *   [43.252, -126.453],\n * ];\n * console.log(encode(path, 5));\n * // \"_p~iF~ps|U_ulLnnqC_mqNvxq`@\"\n * ```\n */\nexport const encode = function (\n  path: (LatLng | LatLngTuple)[],\n  precision = 5\n): string {\n  const factor = Math.pow(10, precision);\n\n  const transform = function latLngToFixed(\n    latLng: LatLng | LatLngTuple\n  ): [number, number] {\n    if (!Array.isArray(latLng)) {\n      latLng = [latLng.lat, latLng.lng];\n    }\n\n    return [round(latLng[0] * factor), round(latLng[1] * factor)];\n  };\n\n  return polylineEncodeLine(path, transform);\n};\n\n/**\n * Encodes a generic polyline; optionally performing a transform on each point\n * before encoding it.\n *\n * @ignore\n */\nexport const polylineEncodeLine = function (\n  array: (LatLng | LatLngTuple)[],\n  transform: (latLng: LatLng | LatLngTuple) => [number, number]\n): string {\n  const v: string[] = [];\n  let start = [0, 0];\n  let end;\n  for (let i = 0, I = array.length; i < I; ++i) {\n    // In order to prevent drift (from quantizing deltas), we explicitly convert\n    // coordinates to fixed-precision to obtain integer deltas.\n    end = transform(array[i]);\n\n    // Push the next edge\n    polylineEncodeSigned(round(end[0]) - round(start[0]), v); // lat\n    polylineEncodeSigned(round(end[1]) - round(start[1]), v); // lng\n    start = end;\n  }\n\n  return v.join(\"\");\n};\n\n/**\n * Encodes the given value in our compact polyline format, appending the\n * encoded value to the given array of strings.\n *\n * @ignore\n */\nconst polylineEncodeSigned = function (\n  value: number,\n  array: string[]\n): string[] {\n  return polylineEncodeUnsigned(value < 0 ? ~(value << 1) : value << 1, array);\n};\n\n/**\n * Helper function for encodeSigned.\n *\n * @ignore\n */\nconst polylineEncodeUnsigned = function (\n  value: number,\n  array: string[]\n): string[] {\n  while (value >= 0x20) {\n    array.push(String.fromCharCode((0x20 | (value & 0x1f)) + 63));\n    value >>= 5;\n  }\n  array.push(String.fromCharCode(value + 63));\n  return array;\n};\n\n/**\n * @ignore\n */\nconst round = (v: number) => {\n  return Math.floor(Math.abs(v) + 0.5) * (v >= 0 ? 1 : -1);\n};\n"],"names":[],"mappings":"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"}